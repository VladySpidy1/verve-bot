// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const { GoogleSpreadsheet } = require("google-spreadsheet");
const express = require("express");

const BOT_TOKEN = process.env.BOT_TOKEN;
const SPREADSHEET_ID = process.env.SPREADSHEET_ID;
const KEY_JSON = process.env.KEY_JSON;

const bot = new Telegraf(BOT_TOKEN);
const doc = new GoogleSpreadsheet(SPREADSHEET_ID);

async function accessSheet() {
  const creds = JSON.parse(KEY_JSON);
  await doc.useServiceAccountAuth(creds);
  await doc.loadInfo();
}

function parseDate(dateString) {
  if (!dateString || dateString.trim() === "") return null;
  const parts = dateString.trim().split(".");
  if (parts.length !== 3) return null;
  const [day, month, year] = parts.map(Number);
  return new Date(year, month - 1, day);
}

function isSameDate(d1, d2) {
  return (
    d1.getFullYear() === d2.getFullYear() &&
    d1.getMonth() === d2.getMonth() &&
    d1.getDate() === d2.getDate()
  );
}

async function getOrders(filterFn, title) {
  await accessSheet();
  let message = `${title}\n\n`;
  let counter = 0;

  for (let i = 0; i < doc.sheetCount; i++) {
    const sheet = doc.sheetsByIndex[i];
    await sheet.loadHeaderRow();
    const rows = await sheet.getRows();

    rows.forEach((row) => {
      try {
        const status = row["–°—Ç–∞—Ç—É—Å"]?.trim();
        const deadline = parseDate(row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"]);

        if (status !== "–û—Ç—Ä–∏–º–∞–Ω–æ" && filterFn(row, deadline)) {
          message += `üîπ ${row["–¢–æ–≤–∞—Ä"] || "-"} | ${row["–†–æ–∑–º—ñ—Ä"] || "-"} | ${row["–¢–∫–∞–Ω–∏–Ω–∞"] || "-"} | ${row["–î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏"] || "-"} | –¥–æ ${row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"] || "-"} | ${row["–¢–∏–ø –æ–ø–ª–∞—Ç–∏"] || "-"}\n`;
          counter++;
        }
      } catch (err) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä—è–¥–∫–∞:`, row, err);
      }
    });
  }

  if (counter === 0) {
    return "‚úÖ –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—î–º.";
  }

  return message;
}

bot.start(async (ctx) => {
  try {
    await ctx.reply("–í–∏–±–µ—Ä–∏ –¥—ñ—é:", Markup.inlineKeyboard([
      [Markup.button.callback("üìÑ –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "all")],
      [Markup.button.callback("üöÄ –ó–∞–≤—Ç—Ä–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞", "tomorrow")],
      [Markup.button.callback("‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ", "overdue")]
    ]));
  } catch (err) {
    console.error(err);
  }
});

bot.action("all", async (ctx) => {
  ctx.answerCbQuery();
  try {
    const msg = await getOrders(() => true, "üìÑ –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:");
    ctx.reply(msg);
  } catch (err) {
    console.error(err);
    ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å.");
  }
});

bot.action("tomorrow", async (ctx) => {
  ctx.answerCbQuery();
  try {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);

    const msg = await getOrders(
      (row, deadline) => deadline instanceof Date && !isNaN(deadline) && isSameDate(deadline, tomorrow),
      "üöÄ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞:"
    );
    ctx.reply(msg);
  } catch (err) {
    console.error(err);
    ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–≤—Ç—Ä–∞—à–Ω—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.");
  }
});

bot.action("overdue", async (ctx) => {
  ctx.answerCbQuery();
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const msg = await getOrders(
      (row, deadline) => {
        if (!(deadline instanceof Date) || isNaN(deadline)) return false;
        const d = new Date(deadline);
        d.setHours(0, 0, 0, 0);
        return isSameDate(d, today);
      },
      "‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
    );
    ctx.reply(msg);
  } catch (err) {
    console.error(err);
    ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.");
  }
});

bot.launch({
  dropPendingUpdates: true
});
console.log("Bot launched!");

const app = express();
const PORT = process.env.PORT || 3000;

app.get("/", (req, res) => {
  res.send("Bot is running!");
});

app.listen(PORT, () => {
  console.log(`Web server is listening on port ${PORT}`);
});
