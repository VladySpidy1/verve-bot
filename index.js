// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const { GoogleSpreadsheet } = require("google-spreadsheet");
const express = require("express");

const BOT_TOKEN = process.env.BOT_TOKEN;
const SPREADSHEET_ID = process.env.SPREADSHEET_ID;
const KEY_JSON = process.env.KEY_JSON;

const bot = new Telegraf(BOT_TOKEN);
const doc = new GoogleSpreadsheet(SPREADSHEET_ID);

async function accessSheet() {
  const creds = JSON.parse(KEY_JSON);
  await doc.useServiceAccountAuth(creds);
  await doc.loadInfo();
}

function parseDate(dateString) {
  if (!dateString || dateString.trim() === "") return null;
  const parts = dateString.trim().split(".");
  if (parts.length !== 3) return null;
  const [day, month, year] = parts.map(Number);
  return new Date(year, month - 1, day);
}

function isSameDate(d1, d2) {
  return (
    d1.getFullYear() === d2.getFullYear() &&
    d1.getMonth() === d2.getMonth() &&
    d1.getDate() === d2.getDate()
  );
}

function sendLongMessage(ctx, text) {
  const chunkSize = 4000;
  const chunks = text.match(new RegExp(`.{1,${chunkSize}}`, "gs"));
  return Promise.all(chunks.map(chunk => ctx.reply(chunk)));
}

function isRowEmpty(row) {
  const keysToCheck = ["–¢–æ–≤–∞—Ä", "–î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏"];
  return keysToCheck.every(key => !row[key] || row[key].toString().trim() === "");
}

async function getOrders(filterFn, title) {
  await accessSheet();
  let message = `${title}\n\n`;
  let counter = 0;

  for (let i = 0; i < doc.sheetCount; i++) {
    const sheet = doc.sheetsByIndex[i];
    await sheet.loadHeaderRow();
    const rows = await sheet.getRows();

    rows.forEach((row) => {
      try {
        const status = row["–°—Ç–∞—Ç—É—Å"]?.trim();
        const deadline = parseDate(row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"]);

        if (!isRowEmpty(row) && status !== "–û—Ç—Ä–∏–º–∞–Ω–æ" && filterFn(row, deadline)) {
          message += `üîπ ${row["–¢–æ–≤–∞—Ä"] || "-"} | ${row["–†–æ–∑–º—ñ—Ä"] || "-"} | ${row["–¢–∫–∞–Ω–∏–Ω–∞"] || "-"} | ${row["–î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏"] || "-"} | –¥–æ ${row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"] || "-"} | ${row["–¢–∏–ø –æ–ø–ª–∞—Ç–∏"] || "-"}\n`;
          counter++;
        }
      } catch (err) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä—è–¥–∫–∞:`, row, err);
      }
    });
  }

  if (counter === 0) {
    return "‚úÖ –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—î–º.";
  }

  return message;
}

async function sendMenu(ctx) {
  await ctx.reply("üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –¥—ñ—é:", Markup.inlineKeyboard([
    [
      Markup.button.callback("üìÑ –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "all")
    ],
    [
      Markup.button.callback("üöÄ –ó–∞–≤—Ç—Ä–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞", "tomorrow")
    ],
    [
      Markup.button.callback("‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ", "overdue")
    ],
    [
      Markup.button.callback("‚ûï –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "new_order")
    ]
  ]));
}

let userOrderData = {};

bot.start(async (ctx) => {
  try {
    await sendMenu(ctx);
  } catch (err) {
    console.error(err);
  }
});

bot.hears("/start", async (ctx) => {
  try {
    await sendMenu(ctx);
  } catch (err) {
    console.error(err);
  }
});

bot.on("message", async (ctx) => {
  try {
    await sendMenu(ctx);
  } catch (err) {
    console.error(err);
  }
});

bot.action("all", async (ctx) => {
  ctx.answerCbQuery();
  try {
    const msg = await getOrders(() => true, "üìÑ –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:");
    await sendLongMessage(ctx, msg);
  } catch (err) {
    console.error(err);
    ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å.");
  }
});

bot.action("tomorrow", async (ctx) => {
  ctx.answerCbQuery();
  try {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);

    const msg = await getOrders(
      (row, deadline) => deadline instanceof Date && !isNaN(deadline) && isSameDate(deadline, tomorrow),
      "üöÄ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞:"
    );
    await sendLongMessage(ctx, msg);
  } catch (err) {
    console.error(err);
    ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–≤—Ç—Ä–∞—à–Ω—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.");
  }
});

bot.action("overdue", async (ctx) => {
  ctx.answerCbQuery();
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const msg = await getOrders(
      (row, deadline) => {
        if (!(deadline instanceof Date) || isNaN(deadline)) return false;
        const d = new Date(deadline);
        d.setHours(0, 0, 0, 0);
        return isSameDate(d, today);
      },
      "‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
    );
    await sendLongMessage(ctx, msg);
  } catch (err) {
    console.error(err);
    ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.");
  }
});

bot.action("new_order", async (ctx) => {
  ctx.answerCbQuery();
  userOrderData[ctx.from.id] = {};
  await ctx.reply("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:");
  bot.on("text", async (ctx2) => {
    const data = userOrderData[ctx2.from.id];
    if (!data) return;

    if (!data.product) {
      data.product = ctx2.message.text;
      await ctx2.reply("üìè –í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:");
      return;
    }

    if (!data.size) {
      data.size = ctx2.message.text;
      await ctx2.reply("üßµ –í–≤–µ–¥—ñ—Ç—å —Ç–∫–∞–Ω–∏–Ω—É:");
      return;
    }

    if (!data.material) {
      data.material = ctx2.message.text;
      await ctx2.reply("üí≥ –í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø –æ–ø–ª–∞—Ç–∏:");
      return;
    }

    if (!data.payment) {
      data.payment = ctx2.message.text;
      await ctx2.reply("üì¶ –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:");
      return;
    }

    if (!data.delivery) {
      data.delivery = ctx2.message.text;
      await ctx2.reply("üîó –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è:");
      return;
    }

    if (!data.link) {
      data.link = ctx2.message.text;
      await ctx2.reply("üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É:");
      return;
    }

    if (!data.amount) {
      data.amount = ctx2.message.text;

      const summary = `‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n–¢–æ–≤–∞—Ä: ${data.product}\n–†–æ–∑–º—ñ—Ä: ${data.size}\n–¢–∫–∞–Ω–∏–Ω–∞: ${data.material}\n–¢–∏–ø –æ–ø–ª–∞—Ç–∏: ${data.payment}\n–î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: ${data.delivery}\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è: ${data.link}\n–°—É–º–∞: ${data.amount}`;

      await ctx2.reply(summary, Markup.inlineKeyboard([
        [Markup.button.callback("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "confirm_order"), Markup.button.callback("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "cancel_order")]
      ]));
    }
  });
});

bot.action("confirm_order", async (ctx) => {
  ctx.answerCbQuery();
  const data = userOrderData[ctx.from.id];
  if (!data) return ctx.reply("–î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");

  try {
    await accessSheet();
    const monthName = new Date().toLocaleString("uk-UA", { month: "long" });
    const sheet = doc.sheetsByTitle[monthName.charAt(0).toUpperCase() + month
