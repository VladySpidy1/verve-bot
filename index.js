// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const { GoogleSpreadsheet } = require("google-spreadsheet");
const express = require("express");

// –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
const BOT_TOKEN = process.env.BOT_TOKEN;             // –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
const SPREADSHEET_ID = process.env.SPREADSHEET_ID;   // ID Google –¢–∞–±–ª–∏—Ü—ñ
const KEY_JSON = process.env.KEY_JSON;               // –ü–æ–≤–Ω–∏–π JSON –∫–ª—é—á–∞ —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞ (–æ–¥–Ω–∏–º —Ä—è–¥–∫–æ–º)

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram-–±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ GoogleSpreadsheet
const doc = new GoogleSpreadsheet(SPREADSHEET_ID);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ —Ç–∞–±–ª–∏—Ü—ñ
async function accessSheet() {
  const creds = JSON.parse(KEY_JSON);
  await doc.useServiceAccountAuth(creds);
  await doc.loadInfo();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –∑ —Ç–∞–±–ª–∏—Ü—ñ
// filterFn ‚Äì —Ñ—É–Ω–∫—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞, title ‚Äì –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async function getOrders(filterFn, title) {
  await accessSheet();
  let message = `${title}\n\n`;
  let counter = 0;
  
  // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö –ª–∏—Å—Ç–∞—Ö —Ç–∞–±–ª–∏—Ü—ñ
  for (let i = 0; i < doc.sheetCount; i++) {
    const sheet = doc.sheetsByIndex[i];
    await sheet.loadHeaderRow();
    const rows = await sheet.getRows();
    rows.forEach((row) => {
      // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –Ω–µ "–û—Ç—Ä–∏–º–∞–Ω–æ" —Ç–∞ —Ä—è–¥–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–º–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
      if (row["–°—Ç–∞—Ç—É—Å"] !== "–û—Ç—Ä–∏–º–∞–Ω–æ" && filterFn(row)) {
        message += `üîπ ${row["–¢–æ–≤–∞—Ä"]} | ${row["–†–æ–∑–º—ñ—Ä"]} | ${row["–¢–∫–∞–Ω–∏–Ω–∞"]} | ${row["–î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏"]} | –¥–æ ${row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"]} | ${row["–¢–∏–ø –æ–ø–ª–∞—Ç–∏"]}\n`;
        counter++;
      }
    });
  }
  
  if (counter === 0) {
    return "‚úÖ –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—î–º.";
  }
  
  return message;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–æ–ø–æ–º—ñ–∂–Ω–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–∞—Ç
function isSameDate(d1, d2) {
  return (
    d1.getFullYear() === d2.getFullYear() &&
    d1.getMonth() === d2.getMonth() &&
    d1.getDate() === d2.getDate()
  );
}

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start ‚Äì –≤–∏–≤–æ–¥–∏—Ç—å –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏
bot.start(async (ctx) => {
  try {
    await ctx.reply("–í–∏–±–µ—Ä–∏ –¥—ñ—é:", Markup.inlineKeyboard([
      [Markup.button.callback("üìÑ –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "all")],
      [Markup.button.callback("üöÄ –ó–∞–≤—Ç—Ä–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞", "tomorrow")],
      [Markup.button.callback("‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ", "overdue")]
    ]));
  } catch (err) {
    console.error(err);
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "all"
bot.action("all", async (ctx) => {
  ctx.answerCbQuery();
  try {
    const msg = await getOrders(() => true, "üìÑ –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:");
    ctx.reply(msg);
  } catch (err) {
    console.error(err);
    ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å.");
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "tomorrow"
bot.action("tomorrow", async (ctx) => {
  ctx.answerCbQuery();
  try {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const msg = await getOrders(
      (row) => row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"] && isSameDate(new Date(row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"]), tomorrow),
      "üöÄ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞:"
    );
    ctx.reply(msg);
  } catch (err) {
    console.error(err);
    ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–≤—Ç—Ä–∞—à–Ω—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.");
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "overdue"
bot.action("overdue", async (ctx) => {
  ctx.answerCbQuery();
  try {
    const today = new Date();
    const msg = await getOrders(
      (row) => row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"] && new Date(row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"]) < today,
      "‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
    );
    ctx.reply(msg);
  } catch (err) {
    console.error(err);
    ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.");
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log("Bot launched!");

// ====== Express-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ======
const app = express();
const PORT = process.env.PORT || 3000;

app.get("/", (req, res) => {
  res.send("Bot is running!");
});

app.listen(PORT, () => {
  console.log(`Web server is listening on port ${PORT}`);
});
