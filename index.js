
const { Telegraf, Markup } = require("telegraf");
const { GoogleSpreadsheet } = require("google-spreadsheet");
const fs = require("fs");
require("dotenv").config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const doc = new GoogleSpreadsheet(process.env.SPREADSHEET_ID);

async function accessSheet() {
  const creds = JSON.parse(process.env.KEY_JSON);
  await doc.useServiceAccountAuth(creds);
  await doc.loadInfo();
}

async function getOrders(filterFn, title) {
  await accessSheet();
  let message = `${title}\n\n`;
  let counter = 0;

  for (let i = 0; i < doc.sheetCount; i++) {
    const sheet = doc.sheetsByIndex[i];
    await sheet.loadHeaderRow();
    const rows = await sheet.getRows();

    rows.forEach((row) => {
      if (row["–°—Ç–∞—Ç—É—Å"] !== "–û—Ç—Ä–∏–º–∞–Ω–æ" && filterFn(row)) {
        message += `üîπ ${row["–¢–æ–≤–∞—Ä"]} | ${row["–†–æ–∑–º—ñ—Ä"]} | ${row["–¢–∫–∞–Ω–∏–Ω–∞"]} | ${row["–î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏"]} | –¥–æ ${row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"]} | ${row["–¢–∏–ø –æ–ø–ª–∞—Ç–∏"]}\n`;
        counter++;
      }
    });
  }

  if (counter === 0) {
    return "‚úÖ –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—î–º.";
  }

  return message;
}

bot.start((ctx) => {
  ctx.reply("–í–∏–±–µ—Ä–∏ –¥—ñ—é:", Markup.inlineKeyboard([
    [Markup.button.callback("üìÑ –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "all")],
    [Markup.button.callback("üöÄ –ó–∞–≤—Ç—Ä–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞", "tomorrow")],
    [Markup.button.callback("‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ", "overdue")],
  ]));
});

bot.action("all", async (ctx) => {
  ctx.answerCbQuery();
  const msg = await getOrders(() => true, "üìÑ –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:");
  ctx.reply(msg);
});

bot.action("tomorrow", async (ctx) => {
  ctx.answerCbQuery();
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  const msg = await getOrders(
    (row) => row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"] && isSameDate(new Date(row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"]), tomorrow),
    "üöÄ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞:"
  );
  ctx.reply(msg);
});

bot.action("overdue", async (ctx) => {
  ctx.answerCbQuery();
  const today = new Date();
  const msg = await getOrders(
    (row) => row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"] && new Date(row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"]) < today,
    "‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
  );
  ctx.reply(msg);
});

function isSameDate(d1, d2) {
  return (
    d1.getFullYear() === d2.getFullYear() &&
    d1.getMonth() === d2.getMonth() &&
    d1.getDate() === d2.getDate()
  );
}

bot.launch();

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
