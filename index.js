// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const { GoogleSpreadsheet } = require("google-spreadsheet");
const express = require("express");

const BOT_TOKEN = process.env.BOT_TOKEN;
const SPREADSHEET_ID = process.env.SPREADSHEET_ID;
const KEY_JSON = process.env.KEY_JSON;
const DOMAIN = process.env.RENDER_EXTERNAL_URL;
const PORT = process.env.PORT || 3000;

const bot = new Telegraf(BOT_TOKEN);
const doc = new GoogleSpreadsheet(SPREADSHEET_ID);
const app = express();

const STATUS_OPTIONS = [
  "–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
  "–ü–æ—à–∏–≤",
  "–°—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞",
  "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ",
  "–û—Ç—Ä–∏–º–∞–Ω–æ",
  "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è"
];

let userOrderData = {};
let editOrderState = {};

async function accessSheet() {
  const creds = JSON.parse(KEY_JSON);
  await doc.useServiceAccountAuth(creds);
  await doc.loadInfo();
}

function parseDate(dateString) {
  if (!dateString || dateString.trim() === "") return null;
  const parts = dateString.trim().split(".");
  if (parts.length !== 3) return null;
  const [day, month, year] = parts.map(Number);
  return new Date(year, month - 1, day);
}

function isSameDate(d1, d2) {
  return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();
}

function isRowEmpty(row) {
  const keysToCheck = ["–¢–æ–≤–∞—Ä", "–î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏"];
  return keysToCheck.every(key => !row[key] || row[key].toString().trim() === "");
}

function formatOrder(row) {
  return `üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:

–¢–æ–≤–∞—Ä: ${row["–¢–æ–≤–∞—Ä"] || "-"}
–†–æ–∑–º—ñ—Ä: ${row["–†–æ–∑–º—ñ—Ä"] || "-"}
–¢–∫–∞–Ω–∏–Ω–∞: ${row["–¢–∫–∞–Ω–∏–Ω–∞"] || "-"}
–¢–∏–ø –æ–ø–ª–∞—Ç–∏: ${row["–¢–∏–ø –æ–ø–ª–∞—Ç–∏"] || "-"}
–î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: ${row["–î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏"] || "-"}
–ü–æ—Å–∏–ª–∞–Ω–Ω—è: ${row["–ü–æ—Å–∏–ª–∞–Ω–Ω—è"] || "-"}
–°—É–º–∞: ${row["–°—É–º–∞"] || "-"}
–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞: ${row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"] || "-"}
–ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: ${row["–ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤"] || "-"}
–°—Ç–∞—Ç—É—Å: ${row["–°—Ç–∞—Ç—É—Å"] || "-"}`;
}

async function getOrders(filterFn, title) {
  await accessSheet();
  let message = `${title}`;
  let counter = 0;

  for (let i = 0; i < doc.sheetCount; i++) {
    const sheet = doc.sheetsByIndex[i];
    await sheet.loadHeaderRow();
    const rows = await sheet.getRows();

    for (const row of rows) {
      try {
        const status = row["–°—Ç–∞—Ç—É—Å"]?.trim();
        const deadline = parseDate(row["–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞"]);

        if (!isRowEmpty(row) && status !== "–û—Ç—Ä–∏–º–∞–Ω–æ" && filterFn(row, deadline)) {
          message += `\n\n${formatOrder(row)}`;
          counter++;
        }
      } catch (err) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä—è–¥–∫–∞:`, row, err);
      }
    }
  }

  if (counter === 0) return "‚úÖ –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—î–º.";
  return message;
}

async function sendMenu(ctx) {
  await ctx.reply("üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –¥—ñ—é:", Markup.inlineKeyboard([
    [Markup.button.callback("üìÑ –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "all")],
    [Markup.button.callback("üöÄ –ó–∞–≤—Ç—Ä–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞", "tomorrow")],
    [Markup.button.callback("‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ", "overdue")],
    [Markup.button.callback("‚ûï –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "new_order")],
    [Markup.button.callback("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "edit_order")]
  ]));
}

bot.start(async (ctx) => await sendMenu(ctx));

bot.action("main_menu", async (ctx) => {
  ctx.answerCbQuery();
  await sendMenu(ctx);
});

bot.action("all", async (ctx) => {
  ctx.answerCbQuery();
  const msg = await getOrders(() => true, "üìÑ –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:");
  await ctx.reply(msg);
});

bot.action("tomorrow", async (ctx) => {
  ctx.answerCbQuery();
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  tomorrow.setHours(0, 0, 0, 0);
  const msg = await getOrders((row, deadline) => deadline && isSameDate(deadline, tomorrow), "üöÄ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞:");
  await ctx.reply(msg);
});

bot.action("overdue", async (ctx) => {
  ctx.answerCbQuery();
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const msg = await getOrders((row, deadline) => deadline && isSameDate(deadline, today), "‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:");
  await ctx.reply(msg);
});

bot.action("new_order", async (ctx) => {
  ctx.answerCbQuery();
  userOrderData[ctx.from.id] = { step: 1, completed: false };
  await ctx.reply("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:");
});

bot.on("text", async (ctx) => {
  const data = userOrderData[ctx.from.id];
  const editState = editOrderState[ctx.from.id];

  if (data && !data.completed) {
    if (data.step === 1) {
      data.product = ctx.message.text;
      data.step++;
      await ctx.reply("üìè –í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:");
    } else if (data.step === 2) {
      data.size = ctx.message.text;
      data.step++;
      await ctx.reply("üßµ –í–≤–µ–¥—ñ—Ç—å —Ç–∫–∞–Ω–∏–Ω—É:");
    } else if (data.step === 3) {
      data.material = ctx.message.text;
      data.step++;
      await ctx.reply("üí≥ –í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø –æ–ø–ª–∞—Ç–∏:");
    } else if (data.step === 4) {
      data.payment = ctx.message.text;
      data.step++;
      await ctx.reply("üì¶ –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:");
    } else if (data.step === 5) {
      data.delivery = ctx.message.text;
      data.step++;
      await ctx.reply("üîó –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è:");
    } else if (data.step === 6) {
      data.link = ctx.message.text;
      data.step++;
      await ctx.reply("üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É:");
    } else if (data.step === 7) {
      data.amount = ctx.message.text;
      data.completed = true;
      const summary = `‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n${formatOrder(data)}`;
      await ctx.reply(summary, Markup.inlineKeyboard([
        [Markup.button.callback("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "confirm_order"), Markup.button.callback("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "cancel_order")],
        [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–∞", "main_menu")]
      ]));
    }
  } else if (editState && editState.step === 1) {
    editState.query = ctx.message.text;
    editState.step++;
    await accessSheet();
    let foundRow = null;
    for (let i = 0; i < doc.sheetCount; i++) {
      const sheet = doc.sheetsByIndex[i];
      await sheet.loadHeaderRow();
      const rows = await sheet.getRows();
      for (const row of rows) {
        if (row["–î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏"]?.includes(editState.query)) {
          foundRow = row;
          break;
        }
      }
      if (foundRow) break;
    }
    if (!foundRow) {
      delete editOrderState[ctx.from.id];
      return ctx.reply("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }
    editState.row = foundRow;
    await ctx.reply(`${formatOrder(foundRow)}\n\n–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:`, Markup.inlineKeyboard(
      STATUS_OPTIONS.map(s => [Markup.button.callback(s, `set_status:${s}`)])
    ));
  } else if (editState && editState.step === 3) {
    editState.ttn = ctx.message.text;
    try {
      editState.row["–°—Ç–∞—Ç—É—Å"] = editState.status;
      editState.row["–¢–¢–ù"] = editState.ttn;
      await editState.row.save();
      delete editOrderState[ctx.from.id];
      await ctx.reply("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", Markup.inlineKeyboard([
        [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–∞", "main_menu")]
      ]));
    } catch (err) {
      console.error(err);
      await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.");
    }
  } else {
    await sendMenu(ctx);
  }
});

bot.action("edit_order", async (ctx) => {
  ctx.answerCbQuery();
  editOrderState[ctx.from.id] = { step: 1 };
  await ctx.reply("üîç –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:");
});

bot.action("confirm_order", async (ctx) => {
  ctx.answerCbQuery();
  const data = userOrderData[ctx.from.id];
  if (!data) return ctx.reply("–î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
  try {
    await accessSheet();
    const monthName = new Date().toLocaleString("uk-UA", { month: "long" });
    const sheetTitle = monthName.charAt(0).toUpperCase() + monthName.slice(1);
    const sheet = doc.sheetsByTitle[sheetTitle];
    if (!sheet) return ctx.reply(`–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–∞ "${sheetTitle}".`);
    const today = new Date();
    const deadline = new Date(today);
    deadline.setDate(today.getDate() + 5);
    const diffDays = Math.ceil((deadline - today) / (1000 * 60 * 60 * 24));
    await sheet.addRow({
      "–¢–æ–≤–∞—Ä": data.product,
      "–†–æ–∑–º—ñ—Ä": data.size,
      "–¢–∫–∞–Ω–∏–Ω–∞": data.material,
      "–¢–∏–ø –æ–ø–ª–∞—Ç–∏": data.payment,
      "–î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏": data.delivery,
      "–ü–æ—Å–∏–ª–∞–Ω–Ω—è": data.link,
      "–°—É–º–∞": data.amount,
      "–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è": today.toLocaleDateString("uk-UA"),
      "–ö—Ä–∞–π–Ω—è –¥–∞—Ç–∞": deadline.toLocaleDateString("uk-UA"),
      "–ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤": diffDays,
      "–°—Ç–∞—Ç—É—Å": "–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
    });
    delete userOrderData[ctx.from.id];
    await ctx.reply("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!");
  } catch (err) {
    console.error(err);
    ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.");
  }
});

bot.action("cancel_order", async (ctx) => {
  ctx.answerCbQuery();
  delete userOrderData[ctx.from.id];
  await ctx.reply("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
});

bot.action(/set_status:(.+)/, async (ctx) => {
  ctx.answerCbQuery();
  const editState = editOrderState[ctx.from.id];
  if (!editState || !editState.row) return;
  editState.status = ctx.match[1];
  editState.step = 3;
  await ctx.reply("üöö –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –¢–¢–ù:");
});

bot.telegram.setWebhook(`${DOMAIN}/bot${BOT_TOKEN}`);
app.use(bot.webhookCallback(`/bot${BOT_TOKEN}`));

app.get("/", (req, res) => res.send("ü§ñ VERVE –±–æ—Ç –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ Webhook!"));

app.listen(PORT, () => {
  console.log(`‚úÖ Webhook –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
